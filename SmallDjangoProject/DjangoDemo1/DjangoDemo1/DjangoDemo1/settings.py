"""
Django settings for DjangoDemo1 project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# from curses.ascii import SI
import sys
if sys.platform != 'win32':
    from curses.ascii import SI
else:
    import curses  # This works after installing `windows-curses` pip install windows-curses

# curses module, which is a library primarily designed for Unix-based systems (like Linux). It doesn't come pre-installed on Windows.

# requerder for google  signin django-allauth
# pip install requests  # required for google  signin django-allauth
# pip install PyJWT  # required for google  signin django-allauth
# pip install cryptography # required for google  signin django-allauth
# pip install django-allauth # required for google  signin django-allauth
# pip install windows-curses # required for google  signin django-allauth



    
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2i=a6))b8votb*7@=x+p8i!cjhf*^#mlow^hc426=i+g_@qrv)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

SITE_ID = 2 # Add this line to include the app in the project for OAuth from allauth app

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'AppDjDemo1.apps.Appdjdemo1Config',  
    #"AppDjDemo1", 
    # Add this line to include the app in the project
    "django.contrib.sites", # required for django-allauth
    "allauth", # pip install django-allauth
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google", # required for google  signin django-allauth , this is the provider for google
    # add more providers here
    # "allauth.socialaccount.providers.facebook",
    # "allauth.socialaccount.providers.twitter",
    # "allauth.socialaccount.providers.github",
    # "allauth.socialaccount.providers.linkedin",
    # "allauth.socialaccount.providers.instagram",
    # "allauth.socialaccount.providers.pinterest",
    # "allauth.socialaccount.providers.reddit",
    # "allauth.socialaccount.providers.slack",
    # "allauth.socialaccount.providers.spotify",
    # "allauth.socialaccount.providers.twitch",
    # "allauth.socialaccount.providers.vimeo",
    # "allauth.socialaccount.providers.yahoo",
    # "allauth.socialaccount.providers.amazon",
    # "allauth.socialaccount.providers.dropbox",
    # "allauth.socialaccount.providers.disqus",
    # "allauth.socialaccount.providers.foursquare",
    # "allauth.socialaccount.providers.gitlab",
    
    
]



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': {
            'profile',
                'email',
        },
        'AUTH_PARAMS': {"access_type": "online"},
        
        
    }
    
    # other providers go here

}

AUTHENTICATION_BACKENDS = (
    
    # Needed to login by username in Django admin, regardless of `allauth`
    
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend"
    
)


LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL = '/'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware', # required for djamgo-allauth
]

ROOT_URLCONF = 'DjangoDemo1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoDemo1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# STATIC_URL = '/static/'
# STATICFILES_DIRS = [BASE_DIR / "static",]

# import os
# from pathlib import Path

# BASE_DIR = Path(__file__).resolve().parent.parent

# # Add this setting
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]



import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# Add this setting for serving static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # This should point to the actual 'static' directory
]

# Add the STATIC_ROOT setting
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # This is for ' python manage.py collectstatic  ' command to collect all static files in one place






# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
